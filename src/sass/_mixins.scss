//
// Mixins
// --------------------------------------------------

// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}

// Center-align a block level element
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  box-sizing: $boxmodel;
}


// Sizing shortcuts
@mixin size($width, $height) {
  width: $width;
  height: $height;
}


// CSS3 PROPERTIES
// --------------------------------------------------

// 4 rounded corners
@mixin border-radius($radius){
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

// Single side border-radius
@mixin border-top-radius($radius) {
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
}

// Drop shadows
@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

// Transitions
@mixin transition($transition...) {
  transition: $transition;
}
@mixin transition-property($transition-property) {
  transition-property: $transition-property;
}
@mixin transition-delay($transition-delay) {
  transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  transition-duration: $transition-duration;
}
@mixin transition-transform($transition...) {
  transition: transform $transition;
}

// Animations
@mixin animation($animation) {
  animation: $animation;
}

// Color Schemes

// Sets the specified background color and calculates a dark or light
// contrasted text color. The arguments are passed through to the contrast-color function.
/*
.example {
  p.dark {
    @include contrasted(#5f1210);
  }
  p.light {
    @include contrasted(#c82523);
  }
}
*/
@mixin contrasted($background-color, $dark: $contrasted-dark-default, $light: $contrasted-light-default, $threshold: $contrasted-lightness-threshold) {
  background-color: $background-color;
  color: contrast-color($background-color, $dark, $light, $threshold);
}



// Background Size

@mixin background-size($bg-width, $bg-height) {
  background-size: $bg-width $bg-height;
}


// Flexbox Layout
// --------------------------------------------------

@mixin flexbox() {
  display: flex;
  flex-direction: row;
  flex-flow: row wrap;
}

@mixin flex($values) {
  flex:  $values;
}

@mixin order($val) {
  order: $val;
}


// Buttons and Icons
// --------------------------------------------------

// Controlbuttons, Infobuttons and -Icons
@mixin iconfont-button($color) {
  color: $color;
  background: transparent !important;
  text-decoration: none;
  speak: none;
  font-weight: bold;

  &:hover {
    text-shadow: 0px 0px 4px #FFFFFF;
    filter: dropshadow(color=#FFFFFF, offx=0, offy=0);
    cursor: pointer;
  }
}

// Playbutton
@mixin playbutton() {
  font-family: $font-family-icons !important;
  font-size: 42px;
  line-height: 1.33em;
  border: 5px solid $white !important;
  border-radius: 60px !important;
  transition: none;
  &:before {
    content: "\25b6";
    padding-left: 0.02em;
  }
  &:focus,
  &:hover,
  &:active {
    @include textshadows(0px 0px 10px #FFFFFF);
    }
}

// Flat buttons
@mixin button-flat($color, $bg-color) {
  color: $color;
  background: $bg-color;
  text-decoration: none;
  speak: none;
  border: 1px solid $bg-color;

  &:hover {
    background-color: $default-link-color;
    cursor: pointer;
  }
}

// Shadows
@mixin textshadows($shadows...) {
  text-shadow: $shadows;
}

@mixin box-shadow($shadows...) {
  box-shadow: $shadows;
}

// Circles
@mixin circle($radius) {
  border-radius: 50%;
  width: $radius;
  height: $radius;
}
